package GUI;

import Logic.History;
import Logic.Roles;
import Logic.Plans;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import Logic.ExportarExcel;
import Logic.Logic;
import Logic.PlanNotes;
import Logic.Delete;
import Logic.Update;
import Logic.FileQueuesLog;

/**
 *
 * @author pc
 */
public class FoodPlans extends javax.swing.JFrame {

    /**
     * Creates new form PlanAlimenticioCRUD
     */
    public FoodPlans() {
        initComponents();
    }
    
    PlanNotes queue = new PlanNotes();
    Logic Fl = new Logic();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfSnacks = new javax.swing.JLabel();
        lbFoodPlans = new javax.swing.JLabel();
        lbDinner = new javax.swing.JLabel();
        lbLunch = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lbBreakFast = new javax.swing.JLabel();
        btnAddFoodPlan = new javax.swing.JButton();
        btnDeleteFoodPlan = new javax.swing.JButton();
        btnUpdateFoodPlan = new javax.swing.JButton();
        btnShowFoodPlans = new javax.swing.JButton();
        lbID = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        tfSearch = new javax.swing.JTextField();
        txtMeriendas = new javax.swing.JTextField();
        tfBreakFast = new javax.swing.JTextField();
        tfLunch = new javax.swing.JTextField();
        tfDinner = new javax.swing.JTextField();
        lbMessages = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuPDF = new javax.swing.JMenu();
        menuExcel = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfSnacks.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        tfSnacks.setText("SNACKS");
        getContentPane().add(tfSnacks);

        lbFoodPlans.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lbFoodPlans.setText("FOOD PLANS");
        getContentPane().add(lbFoodPlans);

        lbDinner.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lbDinner.setText("DINNER");
        getContentPane().add(lbDinner);

        lbLunch.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lbLunch.setText("LUNCH");
        getContentPane().add(lbLunch);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "BREAKFAST", "LUNCH", "DINNER", "SNACKS"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);

        getContentPane().add(jScrollPane4);

        lbBreakFast.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lbBreakFast.setText("BREAKFAST");
        getContentPane().add(lbBreakFast);

        btnAddFoodPlan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        btnAddFoodPlan.setText("Add Plan");
        btnAddFoodPlan.setBorderPainted(false);
        btnAddFoodPlan.setContentAreaFilled(false);
        btnAddFoodPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFoodPlanActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddFoodPlan);

        btnDeleteFoodPlan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete2.png"))); // NOI18N
        btnDeleteFoodPlan.setBorderPainted(false);
        btnDeleteFoodPlan.setContentAreaFilled(false);
        btnDeleteFoodPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFoodPlanActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteFoodPlan);

        btnUpdateFoodPlan.setText("UPDATE FOOD PLAN");
        btnUpdateFoodPlan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modify.png"))); // NOI18N
        btnUpdateFoodPlan.setBorderPainted(false);
        btnUpdateFoodPlan.setContentAreaFilled(false);
        btnUpdateFoodPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFoodPlanActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateFoodPlan);

        btnShowFoodPlans.setText("SHOW FOOD PLANS");
        btnShowFoodPlans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/show.png"))); // NOI18N
        btnShowFoodPlans.setBorderPainted(false);
        btnShowFoodPlans.setContentAreaFilled(false);
        btnShowFoodPlans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowFoodPlansActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowFoodPlans);

        lbID.setFont(new java.awt.Font("Berlin Sans FB", 1, 18)); // NOI18N
        lbID.setText("ID");
        getContentPane().add(lbID);
        getContentPane().add(tfID);
        getContentPane().add(tfSearch);
        getContentPane().add(txtMeriendas);
        getContentPane().add(tfBreakFast);
        getContentPane().add(tfLunch);

        tfDinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDinnerActionPerformed(evt);
            }
        });
        getContentPane().add(tfDinner);
        getContentPane().add(lbMessages);

        menuPDF.setText("PDF EXPORT");
        menuPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuPDFMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuPDF);

        menuExcel.setText("EXCEL EXPORT");
        menuExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuExcelMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuExcel);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuPDFMouseClicked
        MessageFormat header = new MessageFormat("Planes Alimenticios");
        MessageFormat footer = new MessageFormat("Página{0,number,integer}");
        try {
            jTable1.print(JTable.PrintMode.NORMAL, header, footer);
            JOptionPane.showMessageDialog(null, "Exportado correctamente");
        } catch (PrinterException ex) {
            System.err.format("Error de impresion", ex.getMessage());
        }
    }//GEN-LAST:event_menuPDFMouseClicked

    private void btnAddFoodPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFoodPlanActionPerformed
        Date objDate = new Date(); // Sistema actual La fecha y la hora se asignan a objDate 
        String strDateFormat = "dd-MMM-y"; // El formato de fecha está especificado  
        SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat); // La cadena de formato de fecha se pasa como un argumento al objeto 
        // txtFecha.setText(objSDF.format(objDate)); // El formato de fecha se aplica a la fecha actual
        //---------------------------------------------VALIDACION CEDULA--------------------------------------------------------- 
        
        int count = 0;
        if (Fl.validateCed(tfID.getText()) && tfID.getText().length() == 9) {
            if (tfID.getText().equals("") || tfLunch.getText().equals("") || tfBreakFast.getText().equals("") || txtMeriendas.getText().equals("") || tfDinner.getText().equals("")) {
                lbMessages.setText("FILL THE DATA!");
            }//End if 
            else {
                try {
                    Plans plan = new Plans(tfID.getText(), objSDF.format(objDate), tfBreakFast.getText(), tfLunch.getText(), tfDinner.getText(), txtMeriendas.getText());
                    queue.planesPacienteInsertar(tfID.getText(), objSDF.format(objDate), tfBreakFast.getText(), tfLunch.getText(), tfDinner.getText(), txtMeriendas.getText());
                    mostrarPlanes();

                    //-----------------------------------------HORA-------------------------------
                    Calendar calendario = Calendar.getInstance();
                    String hora = String.valueOf(calendario.get(Calendar.HOUR_OF_DAY)) + ":" + String.valueOf(calendario.get(Calendar.MINUTE)) + ":" + String.valueOf(calendario.get(Calendar.SECOND));
                    
                    History c = new History(objSDF.format(objDate), hora, "NEW PLAN FOR " + tfID.getText(), getPersona());
                    Fl.insertHistorialAcciones(c);
                    tfID.setText("");
                    tfLunch.setText("");
                    tfBreakFast.setText("");
                    tfDinner.setText("");
                    txtMeriendas.setText("");
                    tfSearch.setText("");
                } catch (FileNotFoundException ex) {
                    lbMessages.setText("WE CAN'T ADD THE PLAN! TRY AGAIN!");
                }
                lbMessages.setText("SAVED PLAN!");
            }
        } else {
            lbMessages.setText("THE ID MUST HAVE 9 NUMBERS!");
            count++;
        }
        
    }//GEN-LAST:event_btnAddFoodPlanActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int seleccion = jTable1.getSelectedRow();
        //(jTable1.getValueAt(seleccion, 0).toString()); ESPACIO DE FECHA 
        tfID.setText(jTable1.getValueAt(seleccion, 1).toString());
        tfBreakFast.setText(jTable1.getValueAt(seleccion, 2).toString());
        tfLunch.setText(jTable1.getValueAt(seleccion, 3).toString());
        tfDinner.setText(jTable1.getValueAt(seleccion, 4).toString());
        txtMeriendas.setText(jTable1.getValueAt(seleccion, 5).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnShowFoodPlansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowFoodPlansActionPerformed
        if (tfSearch.getText().equals("")) {
            mostrarPlanes();
        } else {            
            FileQueuesLog fl = new FileQueuesLog();
            if (fl.readingFilesPlanes(tfSearch.getText()) == true) {                
                try {
                    searchClienteIndividual(tfSearch.getText());
                    tfSearch.setText("");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(CRUDNotes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                lbID.setText("NOT FOUND!");
            }
            tfLunch.setText("");
            tfDinner.setText("");
            tfBreakFast.setText("");
            txtMeriendas.setText("");
            tfSearch.setText("");
            tfID.setText("");            
        }
    }//GEN-LAST:event_btnShowFoodPlansActionPerformed

    private void btnUpdateFoodPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFoodPlanActionPerformed
        int seleccion = jTable1.getSelectedRow();
        try {
            Update em = new Update();
            int edit = JOptionPane.showConfirmDialog(null, "ARE YOU SURE TO UPDATE THE PLAN FROM " + tfID.getText() + " ?");
            if (edit == 0) { //cedula y luego sigue fecha
                em.actualizarPlanPersona(tfID.getText(), jTable1.getValueAt(seleccion, 0).toString(), tfBreakFast.getText(), tfLunch.getText(), tfDinner.getText(), txtMeriendas.getText());
                lbMessages.setText("SUCCESSFULLY UPDATED!");
                mostrarPlanes();
                //-------------------------------------------FECHA-----------------------------
                Date objDate = new Date(); // Sistema actual La fecha y la hora se asignan a objDate 
                String strDateFormat = "dd-MMM-y"; // El formato de fecha está especificado  
                SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat); // La cadena de formato de fecha se pasa como un argumento al objeto 

                //-----------------------------------------HORA-------------------------------
                Calendar calendario = Calendar.getInstance();
                String hora = String.valueOf(calendario.get(Calendar.HOUR_OF_DAY)) + ":" + String.valueOf(calendario.get(Calendar.MINUTE)) + ":" + String.valueOf(calendario.get(Calendar.SECOND));
                
                History c = new History(objSDF.format(objDate), hora, "YOU UPDATED THE PLAN FROM " + tfID.getText(), getPersona());
                Fl.insertHistorialAcciones(c);
                tfID.setText("");
                tfLunch.setText("");
                tfSearch.setText("");
                tfDinner.setText("");
                tfBreakFast.setText("");
                txtMeriendas.setText("");
            }
        } catch (IOException ex) {
            lbMessages.setText("UPDATE ERROR!");
        }        
    }//GEN-LAST:event_btnUpdateFoodPlanActionPerformed

    private void btnDeleteFoodPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFoodPlanActionPerformed
        int seleccion = jTable1.getSelectedRow();
        try {
            Delete em = new Delete();
            int d = JOptionPane.showConfirmDialog(null, "ARE YOU SURE TO DELETE THE PLAN FROM  " + tfID.getText() + " ?");
            if (d == 0) {
                em.removeLinesColaPlan(jTable1.getValueAt(seleccion, 0).toString(), tfID.getText());
                mostrarPlanes();
                lbMessages.setText("SUCCESSFULLY DELETED!");
                //-------------------------------------------FECHA-----------------------------
                Date objDate = new Date(); // Sistema actual La fecha y la hora se asignan a objDate 
                String strDateFormat = "dd-MMM-y"; // El formato de fecha está especificado  
                SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat); // La cadena de formato de fecha se pasa como un argumento al objeto 

                //-----------------------------------------HORA-------------------------------
                Calendar calendario = Calendar.getInstance();
                String hora = String.valueOf(calendario.get(Calendar.HOUR_OF_DAY)) + ":" + String.valueOf(calendario.get(Calendar.MINUTE)) + ":" + String.valueOf(calendario.get(Calendar.SECOND));
                
                History c = new History(objSDF.format(objDate), hora, "YOU DELETED THE PLAN FROM " + tfID.getText(), getPersona());
                Fl.insertHistorialAcciones(c);
                
                tfID.setText("");
                tfLunch.setText("");
                tfDinner.setText("");
                tfBreakFast.setText("");
                txtMeriendas.setText("");
                tfSearch.setText("");
            }
        } catch (IOException ex) {
            lbMessages.setText("DELETE ERROR!");
        }        
    }//GEN-LAST:event_btnDeleteFoodPlanActionPerformed

    private void menuExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuExcelMouseClicked
        JFileChooser seleccionar = new JFileChooser();
        File archivo;
        if (seleccionar.showDialog(null, "Exportar Excel") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionar.getSelectedFile();
            String imagen = archivo + ".xls";
            File file = new File(imagen);
            ExportarExcel excel = new ExportarExcel(jTable1, file, "" + "tablaimporte");
            excel.export();            
            JOptionPane.showMessageDialog(null, "Exportado correctamente");
        }
    }//GEN-LAST:event_menuExcelMouseClicked

    private void tfDinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDinnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDinnerActionPerformed

    /**
     * Este metodo permite mostrar los planes en el table
     *
     * @param nada
     * @return Nada.
     */
    public void mostrarPlanes() {
        Logic lC = new Logic();
        ArrayList<Plans> array = new ArrayList();
        
        Plans tempCountries[] = lC.readRegistersFilesPlanes();
        for (int i = 0; i < tempCountries.length; i++) {
            array.add(tempCountries[i]);
        }//endfor
        
        String matriz[][] = new String[array.size()][6];
        
        for (int i = 0; i < array.size(); i++) {
            
            matriz[i][0] = array.get(i).getFecha();
            matriz[i][1] = array.get(i).getCedula();
            matriz[i][2] = array.get(i).getDesayuno();
            matriz[i][3] = array.get(i).getAlmuerzo();
            matriz[i][4] = array.get(i).getCena();
            matriz[i][5] = array.get(i).getMeriendas();
            
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    matriz,
                    new String[]{
                        "DATE", "ID", "BREAKFAST", "LUNCH", "DINNER", "SNACKS"
                    }
            ));
        }        
    }

    //Busca al cliente en los registros si lo encuentra lo va a mostra en la tabla
    public void searchClienteIndividual(String cedula) throws FileNotFoundException {
        Logic lC = new Logic();
        ArrayList<Plans> individual = new ArrayList();
        
        Plans tempCountries[] = lC.readRegistersFilesPlanes();
        for (int i = 0; i < tempCountries.length; i++) {
            if (tempCountries[i].getCedula().equalsIgnoreCase(cedula)) {
                individual.add(tempCountries[i]);
            }            
        }
        
        String matriz[][] = new String[individual.size()][6];
        
        for (int i = 0; i < individual.size(); i++) {
            
            matriz[i][0] = individual.get(i).getFecha();
            matriz[i][1] = individual.get(i).getCedula();
            matriz[i][2] = individual.get(i).getDesayuno();
            matriz[i][3] = individual.get(i).getAlmuerzo();
            matriz[i][4] = individual.get(i).getCena();
            matriz[i][5] = individual.get(i).getMeriendas();
            
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    matriz,
                    new String[]{
                        "DATE", "ID", "BREAKFAST", "LUNCH", "DINNER", "SNACKS"
                    }
            ));
        }        
    }

    public String getPersona() {
        Logic lC = new Logic();
        ArrayList<Roles> array = new ArrayList();
        String persona = "";
        
        Roles tempCountries[] = lC.readRegistersFilesIndividual();
        for (int i = 0; i < tempCountries.length; i++) {
            array.add(tempCountries[i]);
        }//endfor
        for (int j = 0; j < 1; j++) {
            persona = array.get(j).getNombre() + " - " + array.get(j).getCedula(); //Obtengo la cedula del usuario activo
        }
        return persona;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodPlans().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFoodPlan;
    private javax.swing.JButton btnDeleteFoodPlan;
    private javax.swing.JButton btnShowFoodPlans;
    private javax.swing.JButton btnUpdateFoodPlan;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbBreakFast;
    private javax.swing.JLabel lbDinner;
    private javax.swing.JLabel lbFoodPlans;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbLunch;
    private javax.swing.JLabel lbMessages;
    private javax.swing.JMenu menuExcel;
    private javax.swing.JMenu menuPDF;
    private javax.swing.JTextField tfBreakFast;
    private javax.swing.JTextField tfDinner;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfLunch;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JLabel tfSnacks;
    private javax.swing.JTextField txtMeriendas;
    // End of variables declaration//GEN-END:variables
}
